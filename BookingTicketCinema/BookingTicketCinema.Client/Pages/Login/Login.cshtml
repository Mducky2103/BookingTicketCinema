@page "/Login"
@model BookingTicketCinema.Client.Pages.Login.LoginModel
@{
	ViewData["Title"] = "Login";
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <h2>Sign in</h2>

        <form id="loginForm" novalidate>
            <div class="mb-3">
                <label asp-for="Email" class="form-label">Email</label>
                <input asp-for="Email" id="email" class="form-control" type="email" autocomplete="username" />
                <span asp-validation-for="Email" class="text-danger"></span>
            </div>

            <div class="mb-3">
                <label asp-for="Password" class="form-label">Password</label>
                <input asp-for="Password" id="password" class="form-control" type="password" autocomplete="current-password" />
                <span asp-validation-for="Password" class="text-danger"></span>
            </div>

            <div id="error" class="text-danger mb-3" style="display:none"></div>

            <button id="submitBtn" class="btn btn-primary" type="submit">Sign in</button>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.getElementById('loginForm').addEventListener('submit', async function (e) {
            e.preventDefault();
            const btn = document.getElementById('submitBtn');
            const errorEl = document.getElementById('error');
            errorEl.style.display = 'none';
            btn.disabled = true;

            const payload = {
                Email: document.getElementById('email').value,
                Password: document.getElementById('password').value
            };

            try {
                const res = await fetch('/api/signin', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!res.ok) {
                    const body = await res.json().catch(() => ({ message: 'Sign in failed' }));
                    errorEl.textContent = body?.message || 'Sign in failed';
                    errorEl.style.display = 'block';
                    btn.disabled = false;
                    return;
                }

                const data = await res.json();
                if (data?.token) {
                    localStorage.setItem('jwt', data.token);
                    // optional: decode token to get user info or redirect
                    window.location.href = '/';
                } else {
                    errorEl.textContent = 'Token not returned by server.';
                    errorEl.style.display = 'block';
                    btn.disabled = false;
                }
            } catch (err) {
                errorEl.textContent = err?.message || 'Network error';
                errorEl.style.display = 'block';
                btn.disabled = false;
            }
        });
    </script>
}