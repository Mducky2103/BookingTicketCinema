@model List<BookingTicketCinemaClient.Models.SeatViewModel>
@{
  ViewData["Title"] = "Seat Layout Manager";
  var rooms = ViewBag.Rooms as List<BookingTicketCinemaClient.Models.RoomViewModel> ?? new List<BookingTicketCinemaClient.Models.RoomViewModel>();
  var seatGroups = ViewBag.SeatGroups as List<BookingTicketCinemaClient.Models.SeatGroupViewModel> ?? new List<BookingTicketCinemaClient.Models.SeatGroupViewModel>();
  // Read TempData into local variables to consume them immediately
  string? successMessage = TempData["SuccessMessage"]?.ToString();
  string? errorMessage = TempData["ErrorMessage"]?.ToString();
}

@* ************** Content ************** *@
<div class="row mb-4">
  <div class="col-12">
    <h4 class="fw-bold py-3 mb-4">Seat Layout Manager</h4>
  </div>
</div>

@* Alerts *@
@if (!string.IsNullOrEmpty(successMessage))
{
  <div class="alert alert-success alert-dismissible mb-4" role="alert">
    <i class="icon-base bx bx-check-circle me-2"></i>
    @successMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
  <div class="alert alert-danger alert-dismissible mb-4" role="alert">
    <i class="icon-base bx bx-error-circle me-2"></i>
    @errorMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
}

@if (ViewBag.ErrorMessage != null)
{
  <div class="alert alert-danger alert-dismissible mb-4" role="alert">
    <i class="icon-base bx bx-error-circle me-2"></i>
    @ViewBag.ErrorMessage
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
  </div>
}

<div class="row">
  <!-- Seats Table -->
  <div class="col-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title m-0 me-2">Seats</h5>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createSeatModal">
          <i class="icon-base bx bx-plus me-1"></i>
          <span class="d-none d-sm-inline-block">Add New Seat</span>
        </button>
      </div>
      <div class="table-responsive text-nowrap">
        <table class="table">
          <thead>
            <tr>
              <th>ID</th>
              <th>Seat Number</th>
              <th>Status</th>
              <th>Room</th>
              <th>Seat Group</th>
              <th>Created At</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody class="table-border-bottom-0">
            @if (Model != null && Model.Any())
            {
              @foreach (var seat in Model)
              {
                <tr>
                  <td><strong>#@seat.SeatId</strong></td>
                  <td>
                    <i class="icon-base bx bx-chair icon-md text-primary me-3"></i>
                    <span class="fw-medium">@seat.SeatNumber</span>
                  </td>
                  <td>
                    <span class="badge bg-label-@(seat.Status == 0 ? "success" : seat.Status == 1 ? "warning" : "danger") me-1">
                      @seat.StatusName
                    </span>
                  </td>
                  <td>
                    @if (!string.IsNullOrEmpty(seat.RoomName))
                    {
                      <span class="text-body">@seat.RoomName</span>
                    }
                    else
                    {
                      <span class="text-muted">Room #@seat.RoomId</span>
                    }
                  </td>
                  <td>
                    @if (!string.IsNullOrEmpty(seat.SeatGroupName))
                    {
                      <span class="text-body">@seat.SeatGroupName</span>
                    }
                    else
                    {
                      <span class="text-muted">Group #@seat.SeatGroupId</span>
                    }
                  </td>
                  <td>@seat.CreatedAt.ToString("MM/dd/yyyy")</td>
                  <td>
                    <div class="dropdown">
                      <button type="button" class="btn p-0 dropdown-toggle hide-arrow" data-bs-toggle="dropdown">
                        <i class="icon-base bx bx-dots-vertical-rounded"></i>
                      </button>
                      <div class="dropdown-menu">
                        <a class="dropdown-item" href="javascript:void(0);" 
                           data-bs-toggle="modal" 
                           data-bs-target="#editSeatModal"
                           data-seat-id="@seat.SeatId"
                           data-seat-number="@seat.SeatNumber"
                           data-seat-status="@seat.Status"
                           data-seat-roomid="@seat.RoomId"
                           data-seat-seatgroupid="@seat.SeatGroupId">
                          <i class="icon-base bx bx-edit-alt me-1"></i> Edit
                        </a>
                        <a class="dropdown-item" href="javascript:void(0);" 
                           onclick="confirmDelete(@seat.SeatId, '@seat.SeatNumber')">
                          <i class="icon-base bx bx-trash me-1"></i> Delete
                        </a>
                      </div>
                    </div>
                  </td>
                </tr>
              }
            }
            else
            {
              <tr>
                <td colspan="7" class="text-center py-6">
                  <p class="text-body-secondary mb-0">No seats found. Create your first seat!</p>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<!-- Create Seat Modal -->
<div class="modal fade" id="createSeatModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalCenterTitle">Create New Seat</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form asp-controller="SeatLayout" asp-action="Create" method="post">
        <div class="modal-body">
          <div class="mb-3">
            <label for="createSeatNumber" class="form-label">Seat Number</label>
            <input type="text" class="form-control" id="createSeatNumber" name="SeatNumber" placeholder="e.g., A1, B5, C12" required maxlength="10" />
          </div>
          <div class="mb-3">
            <label for="createSeatStatus" class="form-label">Status</label>
            <select class="form-select" id="createSeatStatus" name="Status" required>
              <option value="0">Empty</option>
              <option value="1">Booked</option>
              <option value="2">Broken</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="createSeatRoomId" class="form-label">Room</label>
            <select class="form-select" id="createSeatRoomId" name="RoomId" required onchange="loadSeatGroupsForRoom(this.value, 'createSeatSeatGroupId')">
              <option value="">Select a room</option>
              @foreach (var room in rooms)
              {
                <option value="@room.RoomId">@room.Name (@room.TypeName)</option>
              }
            </select>
          </div>
          <div class="mb-3">
            <label for="createSeatSeatGroupId" class="form-label">Seat Group</label>
            <select class="form-select" id="createSeatSeatGroupId" name="SeatGroupId" required>
              <option value="">Select a room first</option>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Create Seat</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Seat Modal -->
<div class="modal fade" id="editSeatModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editModalCenterTitle">Edit Seat</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="editSeatForm" method="post">
        <div class="modal-body">
          <input type="hidden" id="editSeatId" name="id" />
          <input type="hidden" id="editSeatRoomId" name="RoomId" />
          <div class="mb-3">
            <label for="editSeatNumber" class="form-label">Seat Number</label>
            <input type="text" class="form-control" id="editSeatNumber" name="SeatNumber" placeholder="e.g., A1, B5, C12" maxlength="10" />
          </div>
          <div class="mb-3">
            <label for="editSeatStatus" class="form-label">Status</label>
            <select class="form-select" id="editSeatStatus" name="Status">
              <option value="0">Empty</option>
              <option value="1">Booked</option>
              <option value="2">Broken</option>
            </select>
          </div>
          <div class="mb-3">
            <label for="editSeatSeatGroupId" class="form-label">Seat Group</label>
            <select class="form-select" id="editSeatSeatGroupId" name="SeatGroupId">
              <option value="">Select a seat group</option>
            </select>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Update Seat</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Delete Confirmation Form -->
<form id="deleteSeatForm" method="post" style="display: none;">
</form>

@section PageScripts {
<script>
  // Load seat groups when room is selected (for create modal)
  async function loadSeatGroupsForRoom(roomId, targetSelectId) {
    const targetSelect = document.getElementById(targetSelectId);
    if (!roomId || roomId === '') {
      targetSelect.innerHTML = '<option value="">Select a room first</option>';
      return;
    }

    try {
      const response = await fetch(`/admin/seatlayout/get-seatgroups-by-room/${roomId}`);
      const seatGroups = await response.json();
      
      targetSelect.innerHTML = '<option value="">Select a seat group</option>';
      seatGroups.forEach(sg => {
        const option = document.createElement('option');
        option.value = sg.seatGroupId;
        option.textContent = sg.groupName;
        targetSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error loading seat groups:', error);
      targetSelect.innerHTML = '<option value="">Error loading seat groups</option>';
    }
  }

  // Handle edit modal
  document.addEventListener('DOMContentLoaded', function() {
    const editModal = document.getElementById('editSeatModal');
    if (editModal) {
      editModal.addEventListener('show.bs.modal', async function(event) {
        const button = event.relatedTarget;
        const seatId = button.getAttribute('data-seat-id');
        const seatNumber = button.getAttribute('data-seat-number');
        const seatStatus = button.getAttribute('data-seat-status');
        const seatRoomId = button.getAttribute('data-seat-roomid');
        const seatSeatGroupId = button.getAttribute('data-seat-seatgroupid');

        document.getElementById('editSeatId').value = seatId;
        document.getElementById('editSeatNumber').value = seatNumber || '';
        document.getElementById('editSeatStatus').value = seatStatus || '0';
        document.getElementById('editSeatRoomId').value = seatRoomId || '';

        // Load seat groups for the room
        await loadSeatGroupsForRoom(seatRoomId, 'editSeatSeatGroupId');
        
        // Set the selected seat group after loading
        setTimeout(() => {
          document.getElementById('editSeatSeatGroupId').value = seatSeatGroupId || '';
        }, 300);

        const form = document.getElementById('editSeatForm');
        form.action = `/admin/seatlayout/${seatId}/update`;
      });
    }
  });

  // Handle delete confirmation
  function confirmDelete(seatId, seatNumber) {
    if (confirm(`Are you sure you want to delete seat "${seatNumber}"? This action cannot be undone.`)) {
      const form = document.getElementById('deleteSeatForm');
      form.action = `/admin/seatlayout/${seatId}/delete`;
      form.submit();
    }
  }
</script>
}

